{
  "version": 3,
  "file": "sidebar.css",
  "sources": [
    "Todos.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { onMount } from \"svelte\";\r\n;\r\nexport let user;\r\nexport let accessToken;\r\nlet text = \"\";\r\nlet todos = [];\r\nfunction addTodo(t) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const response = yield fetch(`${apiBaseUrl}/todo`, {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                text: t,\r\n            }),\r\n            headers: {\r\n                \"content-type\": \"application/json\",\r\n                authorization: `Bearer ${accessToken}`,\r\n            },\r\n        });\r\n        const { todo } = yield response.json();\r\n        todos = [todo, ...todos];\r\n    });\r\n}\r\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    window.addEventListener(\"message\", (event) => __awaiter(void 0, void 0, void 0, function* () {\r\n        const message = event.data;\r\n        switch (message.type) {\r\n            case \"new-todo\":\r\n                addTodo(message.value);\r\n                break;\r\n        }\r\n    }));\r\n    const response = yield fetch(`${apiBaseUrl}/todo`, {\r\n        headers: {\r\n            authorization: `Bearer ${accessToken}`,\r\n        },\r\n    });\r\n    const payload = yield response.json();\r\n    todos = payload.todos;\r\n}));\r\n</script>\r\n\r\n<style>\r\n    .complete {\r\n        text-decoration: line-through;\r\n    }\r\n</style>\r\n\r\n<div>Hello: {user.name}</div>\r\n\r\n<form\r\n    on:submit|preventDefault={async () => {\r\n        addTodo(text);\r\n        text = '';\r\n    }}>\r\n    <input bind:value={text} />\r\n</form>\r\n\r\n<ul>\r\n    {#each todos as todo (todo.id)}\r\n        <li\r\n            class:complete={todo.completed}\r\n            on:click={async () => {\r\n                todo.completed = !todo.completed;\r\n                const response = await fetch(`${apiBaseUrl}/todo`, {\r\n                    method: 'PUT',\r\n                    body: JSON.stringify({\r\n                        id: todo.id,\r\n                    }),\r\n                    headers: {\r\n                        'content-type': 'application/json',\r\n                        authorization: `Bearer ${accessToken}`,\r\n                    },\r\n                });\r\n                console.log(await response.json());\r\n            }}>\r\n            {todo.text}\r\n        </li>\r\n    {/each}\r\n</ul>\r\n"
  ],
  "names": [],
  "mappings": "AAmDI,SAAS,eAAC,CAAC,AACP,eAAe,CAAE,YAAY,AACjC,CAAC"
}